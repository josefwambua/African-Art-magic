## principles of designing a recommendation system ##

Personalized art recommendation involves using data and algorithms to suggest artworks that are likely to appeal to a particular user. Here's a breakdown of what it entails:

Data Collection
User Preferences: Gather information about the user's interests, favorite artists, styles, and themes 2.
Interaction History: Track which artworks the user has viewed, liked, or interacted with 2.
Search Queries: Analyze the terms users search for when looking for art.
Demographic Data: Collect information about the user's age, location, education level, etc., if available 2.
Algorithm Implementation
Content-Based Filtering: Compare artworks based on attributes like style, color palette, subject matter, etc. 2.
Collaborative Filtering: Analyze patterns in user behavior across the entire user base to find similarities 2.
Hybrid Approach: Combine content-based and collaborative filtering methods for more accurate recommendations 2.
Recommendation Generation
Scoring System: Assign relevance scores to artworks based on the collected data and chosen algorithm 2.
Ranking: Sort artworks by their scores to determine the top recommendations 2.
Diversification: Ensure a mix of familiar and unfamiliar artworks to keep the experience engaging 2.
Implementation Steps
Design the database schema to store user profiles, artwork metadata, and interaction data 2.
Implement algorithms for data analysis and recommendation generation 2.
Integrate the recommendation system into the AR interface 2.
Continuously update and refine the recommendations based on user interactions.

### database
1.User profile - UserId(pk), name, email, gender and age(Demographic info), preferences, (favorite genres,categories)

2. Item - itemId(pk), title,description,attributes(genre, price, release date)

3.Interaction - interactionId(pk), userId(fk), itemId(fk), action(view, like, purchase),timestamp(Dat and time).



// Tables & joins
CREATE TABLE UserProfile (
    UserId INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Gender VARCHAR(10),
    Age INT,
    Preferences TEXT
);

CREATE TABLE Item (
    ItemId INT PRIMARY KEY,
    Title VARCHAR(100),
    Description TEXT,
    Attributes JSON  -- Assuming attributes can be stored as JSON
);

CREATE TABLE Interaction (
    InteractionId INT PRIMARY KEY,
    UserId INT,
    ItemId INT,
    Action VARCHAR(20),  -- e.g., 'view', 'like', 'purchase'
    Timestamp DATETIME,
    FOREIGN KEY (UserId) REFERENCES UserProfile(UserId),
    FOREIGN KEY (ItemId) REFERENCES Item(ItemId)
);


// getting user profiles
SELECT 
    u.UserId, 
    u.Name, 
    u.Email, 
    u.Gender, 
    u.Age, 
    u.Preferences, 
    i.ItemId, 
    i.Title, 
    i.Description, 
    inter.Action, 
    inter.Timestamp
FROM 
    UserProfile u
LEFT JOIN 
    Interaction inter ON u.UserId = inter.UserId
LEFT JOIN 
    Item i ON inter.ItemId = i.ItemId;

// getting items from a specific user
SELECT 
    i.ItemId, 
    i.Title, 
    i.Description, 
    inter.Timestamp
FROM 
    Interaction inter
JOIN 
    Item i ON inter.ItemId = i.ItemId
WHERE 
    inter.UserId = ? AND inter.Action = 'view';

//count interactions by user and item
SELECT 
    u.UserId, 
    u.Name, 
    i.ItemId, 
    i.Title, 
    COUNT(inter.InteractionId) AS InteractionCount
FROM 
    UserProfile u
LEFT JOIN 
    Interaction inter ON u.UserId = inter.UserId
LEFT JOIN 
    Item i ON inter.ItemId = i.ItemId
GROUP BY 
    u.UserId, i.ItemId
ORDER BY 
    InteractionCount DESC;


//get users who liked a specific item
SELECT 
    u.UserId, 
    u.Name, 
    u.Email 
FROM 
    Interaction inter
JOIN 
    UserProfile u ON inter.UserId = u.UserId
WHERE 
    inter.ItemId = ? AND inter.Action = 'like';


// Get Items with Demographic Preferences:

SELECT 
    i.ItemId, 
    i.Title, 
    i.Description 
FROM 
    Item i
WHERE 
    JSON_CONTAINS(u.Preferences, JSON_QUOTE('desired_genre'))  -- Adjust based on preference structure
    OR JSON_CONTAINS(u.Preferences, JSON_QUOTE('desired_category'));

